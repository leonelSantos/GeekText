{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, CLEAR_ERRORS } from '../constants/userConstants';\nexport const login = (ID, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/login', {\n      ID,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const register = (name, ID, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/register', {\n      name,\n      ID,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const updateProfile = (name, nickName, ID, email, creditCard, shippingAddress) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/me/update', {\n      name,\n      nickName,\n      ID,\n      email,\n      creditCard,\n      shippingAddress\n    }, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    await axios.post('/api/v1/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/Users/retina15/Desktop/GeekText/frontend/src/actions/userActions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","CLEAR_ERRORS","login","ID","password","dispatch","type","config","headers","data","post","payload","user","error","response","message","register","name","email","loadUser","get","updateProfile","nickName","creditCard","shippingAddress","put","success","logout","clearErrors"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_FAIL,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAIL,\r\n    UPDATE_PROFILE_REQUEST,\r\n    UPDATE_PROFILE_SUCCESS,\r\n    UPDATE_PROFILE_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    CLEAR_ERRORS\r\n} from '../constants/userConstants'\r\n\r\nexport const login = (ID, password) => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({ type: LOGIN_REQUEST })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.post('/api/v1/login', { ID, password }, config)\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: LOGIN_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const register = (name, ID, email, password) => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({ type: REGISTER_USER_REQUEST })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.post('/api/v1/register', { name, ID, email, password }, config)\r\n\r\n        dispatch({\r\n            type: REGISTER_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({ \r\n            type: REGISTER_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\nexport const loadUser = () => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({ type: LOAD_USER_REQUEST })\r\n\r\n        const { data } = await axios.get('/api/v1/me')\r\n        \r\n        dispatch({\r\n            type: LOAD_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOAD_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateProfile = (name, nickName, ID, email, creditCard, shippingAddress) => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({ type: UPDATE_PROFILE_REQUEST })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put('/api/v1/me/update', {name, nickName, ID, email, creditCard, shippingAddress}, config)\r\n\r\n        dispatch({\r\n            type: UPDATE_PROFILE_SUCCESS,\r\n            payload: data.success\r\n        })\r\n       \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_PROFILE_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    try {\r\n\r\n        await axios.post('/api/v1/logout')\r\n\r\n        dispatch({\r\n            type: LOGOUT_SUCCESS,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOGOUT_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}